Celery是个异步分布式任务队列
三个核心组件：
生产者(Celery client)。生产者(Celery client)发送消息。在Flask上工作时，生产者(Celery client)在Flask应用内运行。
消费者(Celery workers)。消费者用于处理后台任务。消费者(Celery client)可以是本地的也可以是远程的。我们可以在运行Flask的server上运行一个单一的消费者(Celery workers)，当业务量上涨之后再去添加更多消费者(Celery workers)。
消息传递者(message broker)。生产者(Celery client)和消费者(Celery workers)的信息的交互使用的是消息队列(message queue)。Celery支持若干方式的消息队列，其中最常用的是RabbitMQ和Redis.
或者：
任务（task）-队列（broker）-worker-后台存储（backend）
任务：包括异步任务和定时任务，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。
使用-使用@celery.task定义任务。在需要使用异步任务的时候“任务名+.delay(需要的参数)”来使用

队列：Broker，即为任务调度队列，接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。
使用-直接在初始化celery对象时指定“broker  = XX”

worker：Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它
使用-进入项目的虚拟环境，运行“celery -A tasks.celery worker --pool=solo --loglevel=info”命令

结果存储：Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, redis 和 MongoDB 等。
使用-直接在初始化celery对象时指定“backend  = XX”

简单实用celery
首先先导入celery。然后初始化celery，传入app，指定broker和backend，然后官网初始化celery的代码直接复制就好。接下来定义celery任务，使用@celery.task定义任务，在需要使用异步任务的时候“任务名+.delay(需要的参数)”来使用




redis
C语言编写的。开源的高性能非关系型（nosql）的键值对数据库，存储键和不同类型数据结构值之间的映射关系。键的类型：只能是字符串，值的类型：基础的五种数据类型（字符串，list列表，hash字典，set集合，zset有序列表），高级数据类型：位图，布隆过滤器等
存在内存中，读写速度非常快，是已知性能最快的key-value数据库，主要用于缓存，分布式锁，支持事务，持久化等
优点：读写性能优异，支持数据持久化，支持事物，数据结构丰富，支持主从复制
缺点：容量受到物理内存（电脑内存）限制，不具备自动容错和恢复功能，降低了系统的可用性，较难支持在线扩容
为什么要用redis：日常web操作中读操作次数最多，如果每次都要去数据库中读取数据，花费时间太多，而如果放在缓存中，读取效率就可以大大提升（高性能），极大减小了数据库的压力（高并发）
由于redis是使用的是内存空间，开销比较大，所以一般用来存储一些常用和主要的数据，例如用户的登录信息，
redis为什么这么快：
纯内存操作
单线程，无锁竞争
多路I/O复用模型，非阻塞I/O
高效的数据结构，加上底层做了很多优化
redis的过期策略:
redis采用的是定期删除+惰性删除策略

简单使用
启动redis，打开redis的安装目录，其中redis-cli是客户端，redis-server是服务端，双击就可以启动
可以运行redis-server --service-install redis.windows.conf，这样就将redis作为window服务，以后开机就可以自启动了
常用命令：
输入：set key value，保存成功会返回一个ok
获取：get key
所有key值：keys *
查询有效期：ttl key
设置有效期：expire key 5
清空当前数据库：flushdb
清空选中数据库：flushdb select x
清空所有数据库：flushall
备份数据库：save

在celery中的使用
celery中的任务队列和结果存储都可以使用redis缓存
具体使用方法：
在配置celery的过程中直接指定broker和backemd地址就好
默认本机的redis地址为：redis://127.0.0.1:6379/0



